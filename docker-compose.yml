---
version: "3.9"

######### IMPORTANT #############
# This is my main docker-compose file with most of the apps. I run docker on other systems with smaller stacks (web and synology).
# You can copy-paste services from one docker-compose file in this repo to another to add other apps.

########################### SYSTEM DESCRIPTION
# DOCKER-COMPOSE FOR HOME/MEDIA SERVER
# PROXMOX HOST: Dual Intel Xeon 5420, 16 GB RAM, 240 GB SSD, and 2 TB HDD
# VM: 6 CORES, 12 GB RAM, Ubuntu 20.04, and Docker
# 32 GB for /, 64 GB for /var/lib/docker and transcoding, and 1.5 TB for non-critical data and rclone cache.
# Google Drive mounted using Rclone Docker for media and Proxmox backups

########################### NETWORKS
# There is no need to create any networks outside this docker-compose file.
# You may customize the network subnets (192.168.90.0/24 and 91.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way.

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

########################### SECRETS
secrets:
  htpasswd:
    file: $SECRETSDIR/htpasswd
  traefik_forward_auth:
    file: $SECRETSDIR/traefik_forward_auth
  secret_dns:
    file: $SECRETSDIR/gcp-service.json

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-environment: &default-tz-puid-pgid
    TZ: $TZ
    PUID: $PUID
    PGID: $PGID

# Proxy Network and Security
x-network-and-security: &network-and-security
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true

# Keys common to disable startup
x-common-do-not-start: &common-do-not-start
  profiles:
    - do-not-start

# Keys common to some of the services in basic-services.txt
x-common-keys-core: &common-keys-core
  <<: *network-and-security
  restart: always
  # profiles:
  # - basic

# Keys common to some of the services in basic-services.txt
x-common-keys-basic: &common-keys-basic
  <<: *network-and-security
  restart: always
  # profiles:
  # - basic

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  <<: *network-and-security
  restart: unless-stopped
  # profiles:
  # - apps

# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  <<: *network-and-security
  restart: "no"
  # profiles:
  # - media

########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DOCKERDIR/traefik2/acme/acme.json
  # chmod 600 $DOCKERDIR/traefik2/acme/acme.json
  # touch $DOCKERDIR/traefik2/traefik.log
  traefik:
    <<: *common-keys-basic # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:2.6
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      - --api=true
      - --api.insecure=true
      - --api.dashboard=true
      #- --tracing.backend=jaeger
      #- --tracing.serviceName=trefik
      - --tracing.jaeger=true
      - --tracing.jaeger.samplingServerURL=http://localhost:5778/sampling
      - --tracing.jaeger.samplingType=const
      - --tracing.jaeger.samplingParam=1.0
      - --tracing.jaeger.localAgentHostPort=jaeger:6831
      #- --ping=true
      #- --pilot.token=$TRAEFIK_PILOT_TOKEN
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME0`)
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add gcloud as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=lets-encr
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME0
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME0
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      #- --entrypoints.https.http.tls.certresolver=dns-cloudflare
      #- --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME0
      #- --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME0
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME1 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME1 # Pulls wildcard cert for second domain
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.lets-encr.acme.caServer: https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.lets-encr.acme.storage=/acme.json
      - --certificatesResolvers.lets-encr.acme.email=$GCLOUD_EMAIL
      #- --certificatesResolvers.lets-encr.acme.httpChallenge.entryPoint=web
      - --certificatesResolvers.lets-encr.acme.dnsChallenge.provider=gcloud
      - --certificatesResolvers.lets-encr.acme.dnsChallenge.resolvers=8.8.4.4:53,8.8.8.8:53
      #- --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      socket_proxy:
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: $TRAEFIK_WEB_PORT
        protocol: tcp
        mode: host
      - target: 8081
        published: $TRAEFIK_PING_PORT
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/appdata/traefik2/rules/homeserver:/rules # file provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $DOCKERDIR/appdata/traefik2/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
    environment:
      - GCE_PROJECT=${GCE_PROJECT}
      - GCE_SERVICE_ACCOUNT_FILE=${GCE_SERVICE_ACCOUNT_FILE}
      - HTPASSWD_FILE=/run/secrets/htpasswd # HTPASSWD_FILE can be whatever as it is not used/called anywhere.
      - JAEGER_AGENT_HOST=jaeger
    secrets:
      - htpasswd
      - secret_dns
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      ## HTTP CHALLENGE
      ## DNS CHALLENGE
      - "traefik.http.routers.traefik.tls.certresolver=lets-encr"
      - "traefik.http.routers.traefik.tls.domains[0].main=*.$DOMAINNAME0"
      - "traefik.http.routers.traefik.tls.domains[0].sans=$DOMAINNAME0"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME0`)"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Healthcheck/ping
      #- "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME0`) && Path(`/ping`)"
      #- "traefik.http.routers.ping.tls=true"
      #- "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-basic # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    #ports:
    #  - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer

  # Google OAuth - Single Sign On using OAuth 2.0
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    # image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    # Allow apps to bypass OAuth. Radarr example below will bypass OAuth if API key is present in the request (eg. from NZB360 mobile app).
    # While this is one way, the recommended way is to bypass authentication using Traefik labels shown in some of the apps later.
    # command: --rule.radarr.action=allow --rule.radarr.rule="Headers(`X-Api-Key`, `$RADARR_API_KEY`)"
    # command: --rule.sabnzbd.action=allow --rule.sabnzbd.rule="HeadersRegexp(`X-Forwarded-Uri`, `$SABNZBD_API_KEY`)"
    environment:
      #<< : *default-tz-puid-pgid
      - CONFIG=/config
      - COOKIE_DOMAIN=$DOMAINNAME0
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME0
      - URL_PATH=/_oauth
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=86400 # 1 day
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    secrets:
      - source: traefik_forward_auth
        target: /config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

  # Portainer - WebUI for Containers
  portainer:
    <<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-basic # See EXTENSION FIELDS at the top
    container_name: portainer
    image: portainer/portainer-ce:latest
    # command: -H unix:///var/run/docker.sock # # Use Docker Socket Proxy instead for improved security
    command: -H tcp://socket-proxy:2375
    networks:
      - t2_proxy
      - socket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock:ro # # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    #<<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: amir20/dozzle:latest
    container_name: dozzle
    networks:
      - t2_proxy
      - socket_proxy
    ports:
      - "$DOZZLE_PORT:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:2375
    # volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

  # Organizr - Unified Frontend
  organizr:
    #<<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: organizr
    hostname: organizr
    image: organizr/organizr
    #image: organizrtools/organizr-v2:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$ORGANIZR_PORT:80"
    volumes:
      - $DOCKERDIR/appdata/organizr:/config
    environment:
      << : *default-tz-puid-pgid
      fpm: true #true or false | using true will provide better performance
      branch: v2-master
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.rule=Host(`$DOMAINNAME0`,`organizr.$DOMAINNAME0`)" 
      - "traefik.http.routers.organizr-rtr.tls=true"
      ## Middlewares
      #- "traefik.http.routers.organizr-rtr.middlewares=organizr-headers"
      #- "traefik.http.middlewares.organizr-headers.headers.accesscontrolallowmethods=GET, OPTIONS, PUT"
      #- "traefik.http.middlewares.organizr-headers.headers.accesscontrolalloworiginlist=https://$DOMAINNAME0"
      #- "traefik.http.middlewares.organizr-headers.headers.accesscontrolmaxage=100"
      #- "traefik.http.middlewares.organizr-headers.headers.addvaryheader=true"
      #- "traefik.http.middlewares.organizr-headers.headers.allowedhosts=organizr.$DOMAINNAME0"
      #- "traefik.http.middlewares.organizr-headers.headers.hostsproxyheaders=X-Forwarded-Host"
      #- "traefik.http.middlewares.organizr-headers.headers.sslredirect=true"
      #- "traefik.http.middlewares.organizr-headers.headers.sslhost=organizr.$DOMAINNAME0"
      #- "traefik.http.middlewares.organizr-headers.headers.sslforcehost=true"
      #- "traefik.http.middlewares.organizr-headers.headers.sslproxyheaders.X-Forwarded-Proto=https"
      #- "traefik.http.middlewares.organizr-headers.headers.stsseconds=63072000"
      #- "traefik.http.middlewares.organizr-headers.headers.stsincludesubdomains=true"
      #- "traefik.http.middlewares.organizr-headers.headers.stspreload=true"
      #- "traefik.http.middlewares.organizr-headers.headers.forcestsheader=true"
#      - "traefik.http.middlewares.organizr-headers.headers.framedeny=true"
      #- "traefik.http.middlewares.organizr-headers.headers.customframeoptionsvalue=allow-from https:$DOMAINNAME0" # This option overrides FrameDeny
      #- "traefik.http.middlewares.organizr-headers.headers.contenttypenosniff=true"
      #- "traefik.http.middlewares.organizr-headers.headers.browserxssfilter=true"
#      - "traefik.http.middlewares.organizr-headers.headers.contentsecuritypolicy=frame-ancestors 'none'; object-src 'none'; script-src 'none'; base-uri 'none';"
      #- "traefik.http.middlewares.organizr-headers.headers.referrerpolicy=same-origin"
      #- "traefik.http.middlewares.organizr-headers.headers.featurepolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';"
      #- "traefik.http.middlewares.organizr-headers.headers.customresponseheaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex,"
      - "traefik.http.routers.organizr-rtr.middlewares=chain-oauth@file" 
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"



  # nzbget - Binary newsgrabber (NZB downloader)
  nzbget:
    #<<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/nzbget
    container_name: nzbget
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.216
    ports:
      - "$NZBGET_PORT:6789"
    volumes:
      - $DOCKERDIR/appdata/nzbget:/config
      - $DATADIR/data:/data:rw
      - /Volumes/vide00:/Volumes/vide00
      #- $DATADIR/downloads:/data/downloads
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.nzbget-rtr-bypass.entrypoints=https"
      # BYPASS IS NOT WORKING YET. NEED TO FIGURE THIS OUT.
      - "traefik.http.routers.nzbget-rtr-bypass.rule=Host(`nzbget.$DOMAINNAME0`)"
      #- "traefik.http.routers.nzbget-rtr-bypass.rule=Host(`nzbget.$DOMAINNAME0`) && Query(`apikey`, `$NZBGET_API_KEY`)"
      - "traefik.http.routers.nzbget-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.nzbget-rtr.entrypoints=https"
      - "traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.$DOMAINNAME0`)"
      - "traefik.http.routers.nzbget-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.nzbget-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.nzbget-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.nzbget-rtr.service=nzbget-svc"
      - "traefik.http.routers.nzbget-rtr-bypass.service=nzbget-svc"
      - "traefik.http.services.nzbget-svc.loadbalancer.server.port=6789"

  # NZBHydra2 - NZB meta search
  hydra:
    <<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: linuxserver/nzbhydra2:latest
    container_name: hydra
    ports:
      - "$NZBHYDRA_PORT:5076"
    volumes:
      - $DOCKERDIR/appdata/hydra2:/config
      - $DATADIR/downloads:/data/downloads
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.hydra-rtr.entrypoints=https"
      - "traefik.http.routers.hydra-rtr.rule=Host(`hydra.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.hydra-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.hydra-rtr.service=hydra-svc"
      - "traefik.http.services.hydra-svc.loadbalancer.server.port=5076"



  sabnzbd:
    <<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sabnzbd
    container_name: sabnzbd
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/sabnzbd/config:/config
      - $DATADIR/data:/data:rw
      - /Volumes/vide00:/Volumes/vide00
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.120
    ports:
      - "${SABNZBD_HTTP_PORT-8080}:8080"
      - "${SABNZBD_HTTPS_PORT-9090}:9090"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers AUTH BYPASS
      - "traefik.http.routers.sabnzbd-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sabnzbd-rtr-bypass.rule=Host(`sabnzbd`) && (Headers(`X-Api-Key`, `$SICKCHILL_API_KEY`) || Query(`apikey`, `$SICKCHILL_API_KEY`))"
      - "traefik.http.routers.sabnzbd-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sabnzbd-rtr.entrypoints=https"
      - "traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.$DOMAINNAME0`)"
      - "traefik.http.routers.sabnzbd-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sabnzbd-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sabnzbd-rtr.middlewares=chain-oauth@file"
      #- "traefik.http.routers.sabnzbd-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc"
      - "traefik.http.routers.sabnzbd-rtr-bypass.service=sabnzbd-svc"
      - "traefik.http.services.sabnzbd-svc.loadbalancer.server.port=8080"


  sickchill:
    <<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sickchill
    container_name: sickchill
    volumes:
      - $DOCKERDIR/appdata/sickchill/config:/config
      - $DATADIR/data:/data:rw
      - /Volumes/vide00:/Volumes/vide00
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.121
    ports:
      - "${SICKCHILL_PORT-8081}:8081"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sickchill-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sickchill-rtr-bypass.rule=Host(`sickchill.$DOMAINNAME0`) && (Headers(`X-Api-Key`, `$SICKCHILL_API_KEY`) || Query(`apikey`, `$SICKCHILL_API_KEY`))"
      - "traefik.http.routers.sickchill-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sickchill-rtr.entrypoints=https"
      - "traefik.http.routers.sickchill-rtr.rule=Host(`sickchill.$DOMAINNAME0`)"
      - "traefik.http.routers.sickchill-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sickchill-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sickchill-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sickchill-rtr.service=sickchill-svc"
      - "traefik.http.routers.sickchill-rtr-bypass.service=sickchill-svc"
      - "traefik.http.services.sickchill-svc.loadbalancer.server.port=8081" 

  plex:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: plexinc/pms-docker
    container_name: plex
    hostname: plex
    environment:
      <<: *default-tz-puid-pgid
      VERSION: docker
      PLEX_CLAIM: docker
      ALLOWED_NETWORKS: 192.168.1.0/24,192.168.90.0/24
      PLEX_CLAIM: ${PLEX_CLAIM_TOKEN}
      HOSTNAME: plex
      ADVERTISE_IP: https://192.168.90.122:443,http://192.168.1.94:32400,https://plex.${DOMAINNAME0}:443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/plex/library:/config
      - /Volumes/vide00:/Volumes/vide00
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.122
    ports:
      - "${PLEX_PORT-32400}:32400"
      #- "8324:8324"
      - "32469:32469"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plex-rtr.entrypoints=https"
      - "traefik.http.routers.plex-rtr.rule=Host(`plex.$DOMAINNAME0`)"
      - "traefik.http.routers.plex-rtr.priority=10"
      - "traefik.http.routers.plex-rtr.service=plex-svc"
      ## Forward Auth for Web
      - "traefik.http.routers.plexWeb-rtr.entrypoints=https"
      - "traefik.http.routers.plexWeb-rtr.rule=(Host(`plex.$DOMAINNAME0`) && PathPrefix(`/web/`))"
      - "traefik.http.routers.plexWeb-rtr.priority=20"
      # - "traefik.http.routers.plexWeb-rtr.middlewares=secure-chain@file"
      - "traefik.http.routers.plexWeb-rtr.service=plex-svc"
      #- "traefik.http.services.plex-svc.loadbalancer.server.port=32400" 
      ## HTTP Services
      - "traefik.http.services.plex-svc.loadbalancer.server.port=32400"
  #    - com.centurylinklabs.watchtower.enable: "true"


  # Radarr - Movie management
  # Set url_base in radarr settings if using PathPrefix
  radarr:
    #<<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/radarr:nightly # latest was causing "Error parsing column 45"
    container_name: radarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.164
    ports:
      - "$RADARR_PORT:7878"
    volumes:
      - $DOCKERDIR/appdata/radarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $DATADIR/temp/docker/appdata/radarr/MediaCover:/config/MediaCover
      #- $DATADIR/downloads:/data/downloads
      - $DATADIR/data:/data:rw
      - /Volumes/vide00:/data/media
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAINNAME0`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME0`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  # Sonarr - TV Shows management
  # Set url_base in sonarr settings if using PathPrefix
  sonarr:
    #<<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.167
    ports:
      - "$SONARR_PORT:8989"
    volumes:
      - $DOCKERDIR/appdata/sonarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $DATADIR/temp/docker/appdata/sonarr/MediaCover:/config/MediaCover
      #- $DATADIR/downloads:/data/downloads
      - $DATADIR/data:/data:rw
      - /Volumes/vide00:/data/media
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME0`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME0`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  # Readarr - Books management
  # Set url_base in readarr settings if using PathPrefix
  readarr:
    #<<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: hotio/readarr:nightly
    container_name: readarr
    ports:
      - "$READARR_PORT:8787"
    volumes:
      - $DOCKERDIR/appdata/readarr:/config
      #- $DATADIR/downloads:/data/downloads
      - $DATADIR/data:/data:rw
      - /Volumes/vide00/Books:/data/media/books
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
      UMASK: 002
      #ARGS: ""
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.readarr-rtr.entrypoints=https"
      - "traefik.http.routers.readarr-rtr.rule=Host(`readarr.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.readarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.readarr-rtr.service=readarr-svc"
      - "traefik.http.services.readarr-svc.loadbalancer.server.port=8787"


  calibre:
    <<: *common-do-not-start # See EXTENSION FIELDS at the top
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: linuxserver/calibre
    container_name: calibre
    environment:
      <<: *default-tz-puid-pgid
    networks:
      - t2_proxy
    volumes:
      - $DOCKERDIR/appdata/calibre:/config
      - /Volumes/vide00/Books:/bookdata
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "$CALIBRE_DESK_PORT:8080"
      - "$CALIBRE_WEB_PORT:8081"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.calibre-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-rtr.rule=Host(`calibre.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.calibre-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.calibre-rtr.service=calibre-svc"
      - "traefik.http.services.calibre-svc.loadbalancer.server.port=8080"

############################# DATABASE

  # MariaDB - MySQL Database
  mariadb:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    #<<: *common-do-not-start # See EXTENSION FIELDS at the top
    container_name: mariadb
    image: linuxserver/mariadb:latest
    environment:
      <<: *default-tz-puid-pgid
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
    networks:
      - default
    ports:
      - "$MARIADB_PORT:3306"
    volumes:
      - $DOCKERDIR/appdata/mariadb:/config
      - /etc/localtime:/etc/localtime:ro

  ############################# UTILITIES



#  # Guacamole - Remote desktop, SSH, on Telnet on any HTML5 Browser
#  # Create all databases and tables first
#  guacamole:
#    <<: *common-do-not-start # See EXTENSION FIELDS at the top
#    <<: *common-keys-apps # See EXTENSION FIELDS at the top
#    image: guacamole/guacamole:latest
#    container_name: guacamole
#    networks:
#      - t2_proxy
#      - default
#    # ports:
#    #   - "$GUACAMOLE_PORT:8080"
#    environment:
#      GUACD_HOSTNAME: guacd
#      MYSQL_HOSTNAME: $MARIADB_HOST
#      MYSQL_PORT: $MARIADB_PORT
#      MYSQL_DATABASE_FILE: /run/secrets/guac_db_name
#      MYSQL_USER_FILE: /run/secrets/guac_mysql_user
#      MYSQL_PASSWORD_FILE: /run/secrets/guac_mysql_password
#    secrets:
#      - guac_db_name
#      - guac_mysql_user
#      - guac_mysql_password
#    labels:
#      - "traefik.enable=true"
#      ## HTTP Routers
#      - "traefik.http.routers.guacamole-rtr.entrypoints=https"
#      - "traefik.http.routers.guacamole-rtr.rule=Host(`guac.$DOMAINNAME0`)"
#      ## Middlewares
#      - "traefik.http.routers.guacamole-rtr.middlewares=chain-oauth@file,add-guacamole"
#      - "traefik.http.middlewares.add-guacamole.addPrefix.prefix=/guacamole"
#      ## HTTP Services
#      - "traefik.http.routers.guacamole-rtr.service=guacamole-svc"
#      - "traefik.http.services.guacamole-svc.loadbalancer.server.port=8080"

#  # Guacamole Daemon - Needed for Guacamole
#  guacd:
#    <<: *common-do-not-start # See EXTENSION FIELDS at the top
#    <<: *common-keys-apps # See EXTENSION FIELDS at the top
#    image: guacamole/guacd
#    container_name: guacd
#    restart: unless-stopped



#  # qDirStat - Directory Statistics
#  qdirstat:
#    <<: *common-do-not-start # See EXTENSION FIELDS at the top
#    <<: *common-keys-media # See EXTENSION FIELDS at the top
#    <<: *common-keys-apps # See EXTENSION FIELDS at the top
#    image: jlesage/qdirstat:latest
#    container_name: qdirstat
#    # ports:
#    #   - "$QDIRSTAT_PORT:5800"
#    volumes:
#      - $USERDIR:/data/home:ro
#      - $DOCKERDIR/appdata/qdirstat/config:/config:rw
#      - /media/data:/data/data:ro
#    environment:
#      USER_ID: $PUID
#      GROUP_ID: $PGID
#      UMASK: 002
#      TZ: $TZ
#      KEEP_APP_RUNNING: 1
#      CLEAN_TMP_DIR: 1
#      DISPLAY_WIDTH: 1600
#      DISPLAY_HEIGHT: 960
#      VNC_PASSWORD: $QDIRSTAT_VNC_PASSWD
#    labels:
#      - "traefik.enable=true"
#      ## HTTP Routers
#      - "traefik.http.routers.qdirstat-rtr.entrypoints=https"
#      - "traefik.http.routers.qdirstat-rtr.rule=Host(`qdirstat.$DOMAINNAME0`)"
#      ## Middlewares
#      - "traefik.http.routers.qdirstat-rtr.middlewares=chain-oauth@file"
#      ## HTTP Services
#      - "traefik.http.routers.qdirstat-rtr.service=qdirstat-svc"
#      - "traefik.http.services.qdirstat-svc.loadbalancer.server.port=5800"

  ############################# MAINTENANCE

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    networks:
      - socket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375

  jaeger: 
    container_name: jaeger
    <<: *common-do-not-start # See EXTENSION FIELDS at the top
    image: jaegertracing/all-in-one:latest
    networks:
      - t2_proxy
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16685:16685"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    volumes:
      - $DOCKERDIR/appdata/jaeger/jaeger-traefik.yml:/etc/jaeger-traefik.yml:ro
    labels:
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.$DOMAINNAME0`)"
      - "traefik.http.routers.jaeger.entrypoints=http"
      - "traefik.http.routers.jaeger.service=jaeger"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

  netdata:
    container_name: netdata
    image: netdata/netdata
    #<<: *common-do-not-start # See EXTENSION FIELDS at the top
    hostname: media.vk2psf.net # set to fqdn of host
    networks:
      #- t2_proxy
      - default
      - socket_proxy
    ports:
      - 19999:19999
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
      NETDATA_CLAIM_TOKEN: $NETDATA_CLAIM_TOKEN
      NETDATA_CLAIM_URL: https://app.netdata.cloud
      NETDATA_CLAIM_ROOMS: $NETDATA_CLAIM_ROOMS
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - $DOCKERDIR/appdata/netdata/netdataconfig/netdata:/etc/netdata:ro
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro

volumes:
  #netdataconfig:
  netdatalib:
  netdatacache:

